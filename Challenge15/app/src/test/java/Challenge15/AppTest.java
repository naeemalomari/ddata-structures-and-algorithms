/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge15;

import com.sun.source.tree.BinaryTree;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void emptyTreeTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        assertEquals("BinarySearchTree{root=null}", binaryTreeTest.toString());
    }

    @Test
    public void singleRootTreeTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.insert(7);

        assertEquals("BinarySearchTree{root=BinaryNode{data=7, left=null, right=null}}", binaryTreeTest.toString());
    }

    @Test
    public void addSingleLeftRightTreeTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.insert(7);
        binaryTreeTest.insert(9);
        binaryTreeTest.insert(5);

        assertEquals("BinarySearchTree{root=BinaryNode{data=7, left=BinaryNode{data=5, left=null, right=null}, right=BinaryNode{data=9, left=null, right=null}}}", binaryTreeTest.toString());

    }


    @Test
    public void preOrderTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.insert(7);
        binaryTreeTest.insert(9);
        binaryTreeTest.insert(10);
        binaryTreeTest.preOder200();
        assertEquals("BinarySearchTree{root=BinaryNode{data=7, left=null, right=BinaryNode{data=9, left=null, right=BinaryNode{data=10, left=null, right=null}}}}", binaryTreeTest.toString());

    }

    @Test
    public void inorderTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.insert(7);
        binaryTreeTest.insert(9);
        binaryTreeTest.insert(10);
        binaryTreeTest.inorderTraversal();

        assertEquals("BinarySearchTree{root=BinaryNode{data=7, left=null, right=BinaryNode{data=9, left=null, right=BinaryNode{data=10, left=null, right=null}}}}", binaryTreeTest.toString());

    }

    //
    @Test
    public void postorderTest() {
        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.insert(12);
        binaryTreeTest.insert(15);
        binaryTreeTest.insert(11);
        binaryTreeTest.insert(7);
        binaryTreeTest.insert(9);
        binaryTreeTest.insert(10);
        binaryTreeTest.insert(42);
        binaryTreeTest.insert(75);
        binaryTreeTest.insert(10);
        binaryTreeTest.orderPost();
        assertEquals("BinarySearchTree{root=BinaryNode{data=12, left=BinaryNode{data=11, left=BinaryNode{data=7, left=null, right=BinaryNode{data=9, left=null, right=BinaryNode{data=10, left=null, right=null}}}, right=null}, right=BinaryNode{data=15, left=null, right=BinaryNode{data=42, left=null, right=BinaryNode{data=75, left=null, right=null}}}}}", binaryTreeTest.toString());

    }

    @Test
    public void maxNumberTest(){
        BinarySearchTree<Integer> binarySearchTreeTest = new BinarySearchTree<>();


        binarySearchTreeTest.insert(15);
        binarySearchTreeTest.insert(11);
        binarySearchTreeTest.insert(7);
        binarySearchTreeTest.insert(9);
        binarySearchTreeTest.insert(10);
        binarySearchTreeTest.insert(42);
        binarySearchTreeTest.insert(75);
        binarySearchTreeTest.insert(10);

        binarySearchTreeTest.maxNumberInTree();
        assertEquals(75, binarySearchTreeTest.maxNumberInTree());
    }

    @Test
    public void maxNumberTest2(){
        BinarySearchTree<Integer> binarySearchTreeTest = new BinarySearchTree<>();

//
//        binarySearchTreeTest.insert(15);
//        binarySearchTreeTest.insert(11);
//        binarySearchTreeTest.insert(7);
//        binarySearchTreeTest.insert(9);
//        binarySearchTreeTest.insert(10);
//        binarySearchTreeTest.insert(42);
//        binarySearchTreeTest.insert(75);
//        binarySearchTreeTest.insert(10);
        // when the tree is empty.
        binarySearchTreeTest.maxNumberInTree();
        assertEquals(0, binarySearchTreeTest.maxNumberInTree());
    }

}
