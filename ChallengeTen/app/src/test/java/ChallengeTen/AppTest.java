/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ChallengeTen;

import ChallengeTen.LinkedList.structure.LinkedList;
import ChallengeTen.animalShelter.*;
import ChallengeTen.hashTable.HashTable;
import ChallengeTen.queue.structure.Queue;
import ChallengeTen.stack.PseudoQueue;
import ChallengeTen.stack.structure.Stack;


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    /**
     * Code Challenge 10 TEST
     */

    @Test
    public void pushToStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.push("A");

        assertEquals("Stack{top=StackNode{data='A', next=StackNode{data='H', next=StackNode{data='O', next=StackNode{data='M', next=null}}}}}", stackTest.toString());
    }

    @Test
    public void popStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.push("A");
        stackTest.pop();

        assertEquals("Stack{top=StackNode{data='H', next=StackNode{data='O', next=StackNode{data='M', next=null}}}}", stackTest.toString());
    }

    @Test
    public void emptyStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.pop();
        stackTest.pop();
        stackTest.pop();

        assertTrue(stackTest.isEmpty());
    }

    @Test
    public void peekStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");

        assertEquals("H", stackTest.peek());

        stackTest.pop();
        assertEquals("O", stackTest.peek());
    }

    @Test
    public void enqueueToQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");

        assertEquals("Queue{front=QueueNode{data='M', next=QueueNode{data='O', next=QueueNode{data='H', next=null}}}, rear=QueueNode{data='H', next=null}}", queueTest.toString());
    }

    @Test
    public void dequeueFromQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");
        queueTest.dequeue();

        assertEquals("Queue{front=QueueNode{data='O', next=QueueNode{data='H', next=null}}, rear=QueueNode{data='H', next=null}}", queueTest.toString());
    }

    @Test
    public void emptyQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");
        queueTest.dequeue();
        queueTest.dequeue();
        queueTest.dequeue();

        assertTrue(queueTest.isEmpty());
    }

    @Test
    public void peekQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");

        assertEquals("M", queueTest.peek());

        queueTest.dequeue();
        assertEquals("O", queueTest.peek());
    }

    @Test
    public void PseudoQueueHappy() {
        PseudoQueue trials = new PseudoQueue();
        trials.enqueue("Happy");
        trials.enqueue("Path");

        assertEquals("stack1=Stack{top=StackNode{data='Path', next=StackNode{data='Happy', next=null}}}", trials.toString());
    }

    @Test
    public void dequeueTest(){
        PseudoQueue trails = new PseudoQueue();
        trails.enqueue("11");
        trails.enqueue("6");
        trails.enqueue("2017");
        assertEquals("stack1=Stack{top=StackNode{data='2017', next=StackNode{data='6', next=StackNode{data='11', next=null}}}}",trails.toString());
        trails.dequeue();
        trails.dequeue();
        trails.dequeue();
        trails.dequeue();
        assertEquals("stack1=Stack{top=null}",trails.toString());
        assertEquals("Empty", trails.dequeue());
    }
    @Test
    public void dequeueTest12() {
        AnimalShelter animalShelter =new AnimalShelter();
        Animal dog =new Dog();
        animalShelter.enqueue(dog);
        Animal cat=new Cat();
        animalShelter.enqueue(cat);
        System.out.println(animalShelter.dequeue("dog"));
        assertEquals("Queue{front=QueueNode{data='cat', next=null}, rear=QueueNode{data='cat', next=null}}<--FirstQueue--SecondQueue-->Queue{front=null, rear=QueueNode{data='dog', next=null}}", animalShelter.toString());
    }
    @Test
    public void dequeueTest12B() {
        AnimalShelter animalShelter =new AnimalShelter();
        Animal dog =new Dog();
//        animalShelter.enqueue(dog);
        Animal cat=new Cat();
//        animalShelter.enqueue(cat);
        System.out.println(animalShelter.dequeue("dog"));
        assertEquals("Queue{front=null, rear=null}<--FirstQueue--SecondQueue-->Queue{front=null, rear=null}", animalShelter.toString());
    }
    @Test
    public void dequeueTest12C() {
        AnimalShelter animalShelter =new AnimalShelter();
        Animal dog =new Dog();
//        animalShelter.enqueue(dog);
        Animal cat=new Cat();
        animalShelter.enqueue(cat);
        System.out.println(animalShelter.dequeue("dog"));
        assertEquals("Queue{front=QueueNode{data='cat', next=null}, rear=QueueNode{data='cat', next=null}}<--FirstQueue--SecondQueue-->Queue{front=null, rear=null}", animalShelter.toString());
    }
    @Test
    public void validateBrackets() {
        StackAndQueue stackAndQueue =new StackAndQueue();

//        stackAndQueue.validateBrackets("{{{}}}");
        assertTrue(stackAndQueue.validateBrackets("{{{}}}"));
    }
    @Test
    public void validateBracketsA() {
        StackAndQueue stackAndQueue =new StackAndQueue();

//        stackAndQueue.validateBrackets("{{{}}}");
        assertFalse(stackAndQueue.validateBrackets("{{{}}"));
    }
    @Test
    public void validateBracketsB() {
        StackAndQueue stackAndQueue =new StackAndQueue();

//        stackAndQueue.validateBrackets("{{{}}}");
        assertTrue(stackAndQueue.validateBrackets(""));
    }
    @Test void appHasAGreeting() {

        LinkedList classUnderTest = new LinkedList();
        classUnderTest.insert("E");
        classUnderTest.insert("N");
        classUnderTest.insert("G");
        classUnderTest.insert("N");
        classUnderTest.insert("A");
        classUnderTest.insert("I");
        classUnderTest.insert("M.");
        assertEquals(" { E }  ->  { N }  ->  { G }  ->  { N }  ->  { A }  ->  { I }  ->  { M. }  ->  NULL ", classUnderTest.toString());
        assertTrue(classUnderTest.include("E"));
    }


    @Test
    public void isEmptyTest() {
        LinkedList testList = new LinkedList();


    }

    @Test
    public void addNewNodeAtEndTest() {
        LinkedList testList = new LinkedList();
        testList.insert("M");
        testList.insert("M");

    }


    @Test
    public void addBeforeAndAfterTest() {
        LinkedList testList = new LinkedList();
        testList.insert("N");
        testList.insert("A");
        testList.insert("I");
        testList.insert("M");
        assertEquals(" { N }  ->  { A }  ->  { I }  ->  { M }  ->  NULL ", testList.toString());

    }


    @Test
    public void greaterThanLength() {
        LinkedList testList = new LinkedList();
        testList.insert("N");
        testList.insert("A");
        testList.insert("I");
        testList.insert("M");
        assertEquals("Exception", testList.kth(5));
    }

    @Test
    public void equalThanLength() {
        LinkedList testList = new LinkedList();
        testList.insert("N");
        testList.insert("A");
        testList.insert("I");
        testList.insert("M");
        assertEquals("Exception", testList.kth(4));
    }

    @Test
    public void negativeIndex() {
        LinkedList testList = new LinkedList();
        testList.insert("N");
        testList.insert("A");
        testList.insert("I");
        testList.insert("M");
        assertEquals("Exception", testList.kth(-1));
    }

    @Test
    public void size1() {
        LinkedList testList = new LinkedList();
        testList.insert("N");
        assertEquals("Exception", testList.kth(1));
    }

    @Test
    public void happyPath() {
        LinkedList testList = new LinkedList();

        testList.insert("H");
        testList.insert("a");
        testList.insert("p");
        testList.insert("p");
        testList.insert("y");
        testList.insert(" ");
        testList.insert("P");
        testList.insert("a");
        testList.insert("t");
        testList.insert("h");

        assertEquals(" ", testList.kth(4));
    }
    @Test
    public void zipList(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
        testZip.insert("H");
        testZip.insert("a");
        testZip.insert("p");
        testZip1.insert("p");
        testZip1.insert("y");


        assertEquals(" { H }  ->  { p }  ->  { a }  ->  { y }  ->  { p }  ->  NULL " , (testZip.zipLists(testZip,testZip1)).toString());

    }
    @Test
    public void zipList1(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
//    testZip.insert("H");
//    testZip.insert("a");
//    testZip.insert("p");
//    testZip1.insert("p");
//    testZip1.insert("y");


        assertNull(testZip.zipLists(testZip1,testZip), "Both lists are empty");

    }
    @Test
    public void zipList2(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
        testZip.insert("H");
        testZip.insert("a");
        testZip.insert("p");
//    testZip1.insert("p");
//    testZip1.insert("y");



        assertEquals(" { H }  ->  { a }  ->  { p }  ->  NULL ", (testZip.zipLists(testZip,testZip1)).toString());

    }
    @Test
    public void zipList3(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
//    testZip.insert("H");
//    testZip.insert("a");
//    testZip.insert("p");
        testZip1.insert("p");
        testZip1.insert("y");



        assertEquals(" { p }  ->  { y }  ->  NULL ", (testZip.zipLists(testZip,testZip1)).toString());

    }
    @Test
    public void zipList4(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
        testZip.insert("H");
//    testZip.insert("a");
//    testZip.insert("p");
//    testZip1.insert("p");
        testZip1.insert("y");



        assertEquals(" { H }  ->  NULL ", (testZip.zipLists(testZip,testZip1)).toString());

    }
    @Test
    public void zipList5(){

        LinkedList testZip =new LinkedList();
        LinkedList testZip1=new LinkedList();
//    testZip.insert("H");
//    testZip.insert("a");
//    testZip.insert("p");
//    testZip1.insert("p");
        testZip1.insert("y");



        assertEquals(" { y }  ->  NULL ", (testZip.zipLists(testZip,testZip1)).toString());

    }

    @Test
    public void repeatedWordTest(){

        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String paragraph1 = "Once upon a time, there was a Naim prince who...";
        assertEquals("a", test.repeatedWord(paragraph1));

        String paragraph2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
        assertEquals("it", test.repeatedWord(paragraph2));

        String paragraph3= "It was a queer,  sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York";
        assertEquals("summer", test.repeatedWord(paragraph3));

    }
    @Test
    public  void repeatedWordTestNoRepeat(){

        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String paragraph = "Once upon a time Naim ";
        assertEquals("no repeated words", test.repeatedWord(paragraph));
    }
    @Test
    public void repeatedWordTestEmpty(){

        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String paragraph = "";
        assertEquals("no repeated words", test.repeatedWord(paragraph));
    }
}