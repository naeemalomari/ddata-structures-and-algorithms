/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ChallengeTen;

import ChallengeTen.queue.structure.Queue;
import ChallengeTen.stack.PseudoQueue;
import ChallengeTen.stack.structure.Stack;


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    /**
     * Code Challenge 10 TEST
     */

    @Test
    public void pushToStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.push("A");

        assertEquals("Stack{top=StackNode{data='A', next=StackNode{data='H', next=StackNode{data='O', next=StackNode{data='M', next=null}}}}}", stackTest.toString());
    }

    @Test
    public void popStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.push("A");
        stackTest.pop();

        assertEquals("Stack{top=StackNode{data='H', next=StackNode{data='O', next=StackNode{data='M', next=null}}}}", stackTest.toString());
    }

    @Test
    public void emptyStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");
        stackTest.pop();
        stackTest.pop();
        stackTest.pop();

        assertTrue(stackTest.isEmpty());
    }

    @Test
    public void peekStackTest() {
        Stack stackTest = new Stack();

        stackTest.push("M");
        stackTest.push("O");
        stackTest.push("H");

        assertEquals("H", stackTest.peek());

        stackTest.pop();
        assertEquals("O", stackTest.peek());
    }

    @Test
    public void enqueueToQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");

        assertEquals("Queue{front=QueueNode{data='M', next=QueueNode{data='O', next=QueueNode{data='H', next=null}}}, rear=QueueNode{data='H', next=null}}", queueTest.toString());
    }

    @Test
    public void dequeueFromQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");
        queueTest.dequeue();

        assertEquals("Queue{front=QueueNode{data='O', next=QueueNode{data='H', next=null}}, rear=QueueNode{data='H', next=null}}", queueTest.toString());
    }

    @Test
    public void emptyQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");
        queueTest.dequeue();
        queueTest.dequeue();
        queueTest.dequeue();

        assertTrue(queueTest.isEmpty());
    }

    @Test
    public void peekQueueTest() {
        Queue queueTest = new Queue();

        queueTest.enqueue("M");
        queueTest.enqueue("O");
        queueTest.enqueue("H");

        assertEquals("M", queueTest.peek());

        queueTest.dequeue();
        assertEquals("O", queueTest.peek());
    }

    @Test
    public void PseudoQueueHappy() {
        PseudoQueue trials = new PseudoQueue();
        trials.enqueue("Happy");
        trials.enqueue("Path");

        assertEquals("stack1=Stack{top=StackNode{data='Path', next=StackNode{data='Happy', next=null}}}", trials.toString());
    }

//    @Test
//    public void PseudoQueueFailure() {
//        PseudoQueue trials = new PseudoQueue();
//        trials.enqueue("Happy");
//        trials.enqueue("Path");
//
//    }

    @Test
    public void dequeueTest(){
        PseudoQueue trails = new PseudoQueue();
        trails.enqueue("11");
        trails.enqueue("6");
        trails.enqueue("2017");
        assertEquals("stack1=Stack{top=StackNode{data='2017', next=StackNode{data='6', next=StackNode{data='11', next=null}}}}",trails.toString());
        trails.dequeue();
        trails.dequeue();
        trails.dequeue();
        trails.dequeue();
        assertEquals("stack1=Stack{top=null}",trails.toString());
        assertEquals("Empty", trails.dequeue());
    }

}