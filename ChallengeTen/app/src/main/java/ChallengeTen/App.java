/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ChallengeTen;

import ChallengeTen.queue.structure.Queue;
import ChallengeTen.stack.PseudoQueue;
import ChallengeTen.stack.structure.Stack;

public class App {

    public static void main(String[] args) {
////
////        stackReturns();
////        queueReturns();
////        pseudoQueue();
//        AnimalShelter animalShelter =new AnimalShelter();
//        Animal dog =new Dog();
//        animalShelter.enqueue(dog);
////        animalShelter.enqueue(dog);
////        animalShelter.enqueue(dog);
////        animalShelter.enqueue(dog);
//        Animal cat=new Cat();
////        animalShelter.enqueue(cat);
////        animalShelter.enqueue(cat);
////        animalShelter.enqueue(dog);
//        animalShelter.enqueue(cat);
//        System.out.println(animalShelter.dequeue("cat"));
//        System.out.println(animalShelter);
//        System.out.println(animalShelter.dequeue("dog"));
//        System.out.println(animalShelter);
//
//        StackAndQueue stackAndQueue =new StackAndQueue();
//        System.out.println(stackAndQueue.validateBrackets("{{{mynameisnaeem}}}"));
//        System.out.println(stackAndQueue.validateBrackets("{{{mynameisnaeem}"));
//        System.out.println(stackAndQueue.validateBrackets("{()}"));
//

        Stack stack1=new Stack();
        stack1.push("5");
        stack1.push("2");
        stack1.push("3");
        stack1.push("4");
        stack1.push("1");

        System.out.println(stack1.getMax());




    }
    public static void stackReturns() {
        Stack stack = new Stack();

        stack.push("A");
        stack.push("A");
        stack.push("Y");
        stack.push("E");
        stack.push("D");

        System.out.println( "The Top Of The Stack is => " + stack.peek());

        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());

    }
    public static void queueReturns(){
        System.out.println("=========================================");

        Queue queue = new Queue();

        queue.enqueue("M");
        queue.enqueue("O");
        queue.enqueue("H");
        queue.enqueue("A");
        queue.enqueue("M");
        queue.enqueue("M");
        queue.enqueue("A");
        queue.enqueue("D");


        System.out.println("The Front Of The Queue is => " + queue.peek());

        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());

    }
    public static void pseudoQueue(){

        PseudoQueue trials =new PseudoQueue();
        trials.enqueue("A");
        trials.enqueue("B");
        trials.enqueue("C");
        trials.enqueue("D");
        System.out.println(trials.dequeue());
        System.out.println(trials.dequeue());
        System.out.println(trials);
        trials.enqueue("SSS");
        trials.enqueue("DDD");
        System.out.println(trials);
        System.out.println(trials.dequeue());
        System.out.println(trials);
    }

    ///////////////////////CHALLENGE14B//////////////////////////////////
//    public static String DuckDuckGoose(int k, String... string) {
//
//
//        GenericQueue<String> queue = new GenericQueue<>();
//
//        for (String s : string) {
//            queue.enQueue(s);
//        }
//
//        while (queue.getFront().getNext() != null) {
//            for (int i = 1; i < k; i++) {
//                queue.enQueue(queue.deQueue(null));
//            }
//            queue.deQueue(null);
//        }
//
//        return queue.peek();
//
//
//    }
}
